package main

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func data_dockerfile_template() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x74, 0x52,
		0xcb, 0x6e, 0xdb, 0x30, 0x10, 0xbc, 0xeb, 0x2b, 0x16, 0xb9, 0xd3, 0x42,
		0x10, 0xb4, 0x40, 0x0f, 0x3a, 0x04, 0x76, 0x5d, 0x04, 0x6d, 0xed, 0x42,
		0xa9, 0xdb, 0x4b, 0x2e, 0x94, 0xb8, 0x52, 0xd8, 0xf2, 0x21, 0x90, 0x94,
		0x1b, 0x27, 0xf5, 0xbf, 0x77, 0x45, 0x8b, 0xb2, 0x5c, 0x24, 0xbe, 0x78,
		0x76, 0x76, 0x49, 0xed, 0x0c, 0x67, 0x5d, 0x6e, 0xbf, 0xc2, 0xcb, 0xcb,
		0x62, 0x25, 0x7d, 0x70, 0xf6, 0x78, 0xcc, 0xca, 0xdd, 0x06, 0x78, 0x17,
		0x58, 0x8b, 0x01, 0xfa, 0x4e, 0xf0, 0x80, 0x17, 0x94, 0x34, 0x3e, 0x70,
		0xa5, 0x80, 0x1d, 0xc0, 0xf5, 0xd5, 0xe1, 0x7a, 0xf1, 0x61, 0x71, 0x03,
		0x55, 0x2f, 0x95, 0x60, 0xe8, 0x3d, 0x9a, 0x20, 0xb9, 0x82, 0x87, 0x0c,
		0xe8, 0xa7, 0x64, 0x55, 0xbf, 0x67, 0x02, 0xf7, 0x03, 0x6a, 0x1a, 0x99,
		0x60, 0x2b, 0x2a, 0x9d, 0xb0, 0xa9, 0x7b, 0xe7, 0xd1, 0xbf, 0x8b, 0xf5,
		0x74, 0xcc, 0x21, 0x17, 0x4a, 0x1a, 0x4c, 0x53, 0xde, 0xab, 0x04, 0x0f,
		0x5c, 0x9f, 0xf0, 0x33, 0x15, 0xd7, 0xed, 0x00, 0xe3, 0x7e, 0x2d, 0xea,
		0x69, 0xb7, 0xa6, 0xd3, 0xc0, 0x58, 0x25, 0x8d, 0x90, 0xae, 0xc8, 0x7b,
		0xef, 0x72, 0xc2, 0xc4, 0x18, 0xcb, 0x9c, 0xb0, 0xf5, 0x88, 0xe4, 0x5b,
		0xba, 0x68, 0x25, 0x15, 0x7b, 0x03, 0x88, 0xde, 0xd8, 0x3f, 0x46, 0x59,
		0x2e, 0x76, 0x4e, 0x1d, 0x8f, 0x7f, 0x03, 0x77, 0x60, 0x9f, 0x9e, 0x97,
		0x90, 0x07, 0xdd, 0x65, 0x3f, 0xb7, 0xe5, 0xe7, 0xd5, 0x5d, 0x19, 0x8b,
		0x7c, 0x70, 0x84, 0xd1, 0x81, 0x92, 0xfe, 0x7f, 0xa0, 0xf3, 0xd2, 0x9a,
		0xd1, 0xd1, 0xe5, 0xfa, 0xcb, 0xed, 0xa7, 0xfb, 0xe2, 0x8a, 0x69, 0xee,
		0xea, 0xc7, 0xc2, 0xf0, 0x20, 0xf7, 0x08, 0x6c, 0x7b, 0x73, 0x05, 0x8b,
		0xbc, 0xb6, 0xa6, 0x91, 0x6d, 0xef, 0x30, 0x3a, 0xc0, 0x58, 0xe7, 0xb0,
		0x91, 0x4f, 0x45, 0x6e, 0xbb, 0x10, 0xaf, 0xfc, 0xff, 0xc6, 0x71, 0x0c,
		0x0d, 0xaf, 0x14, 0x32, 0xff, 0xc8, 0x1d, 0x8a, 0x91, 0x13, 0xd2, 0x47,
		0x72, 0x94, 0xc3, 0x06, 0xb9, 0x17, 0xd3, 0x83, 0x0e, 0xe6, 0x50, 0xc5,
		0x05, 0xe2, 0x6a, 0x9a, 0xff, 0xa6, 0x4d, 0x7e, 0xd1, 0x47, 0x36, 0xbd,
		0x5e, 0x7e, 0xdb, 0xd1, 0xfd, 0xc9, 0x8c, 0xd5, 0xc7, 0xfb, 0xef, 0x24,
		0xae, 0x88, 0xe2, 0xc8, 0xd5, 0xec, 0x2c, 0x37, 0x1e, 0x1d, 0x8c, 0x3e,
		0x3d, 0x1a, 0xf3, 0x40, 0x66, 0xa7, 0x22, 0x80, 0xc0, 0x2a, 0x15, 0x06,
		0x5e, 0xb5, 0x25, 0xb5, 0xf9, 0xe0, 0xf0, 0x2d, 0x99, 0x72, 0xa6, 0xf6,
		0xf0, 0xc6, 0x30, 0xd1, 0x77, 0x01, 0x1d, 0xed, 0x1e, 0x8d, 0x8d, 0xc3,
		0x62, 0x96, 0xb3, 0x87, 0x19, 0x95, 0x02, 0x37, 0xe7, 0xa6, 0xe4, 0xcd,
		0xc9, 0x57, 0x22, 0x78, 0x6a, 0x5c, 0xa4, 0x70, 0xde, 0x48, 0x71, 0x9c,
		0x73, 0x53, 0x2e, 0x27, 0xf2, 0x1c, 0xd0, 0xc4, 0x9d, 0x22, 0x93, 0xcf,
		0x5c, 0xeb, 0x20, 0x27, 0x4d, 0x6b, 0xa9, 0x70, 0xc3, 0x35, 0x4e, 0x3a,
		0xe9, 0xe1, 0xb3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x0e, 0xee,
		0x9c, 0x99, 0x03, 0x00, 0x00,
		},
		"data/Dockerfile.template",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"data/Dockerfile.template": data_dockerfile_template,
}
